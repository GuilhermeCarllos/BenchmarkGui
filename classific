#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// função que realiza a troca entre dois elementos
void troca(int vet[], int i, int j)
{
	int aux = vet[i];
	vet[i] = vet[j];
	vet[j] = aux;
}

// particiona e retorna o índice do pivô
int particiona(int vet[], int inicio, int fim)
{
	int pivo, pivo_indice, i;
	
	pivo = vet[fim]; // o pivô é sempre o último elemento
	pivo_indice = inicio;
	
	for(i = inicio; i < fim; i++)
	{
		// verifica se o elemento é <= ao pivô
		if(vet[i] <= pivo)
		{
			// realiza a troca
			troca(vet, i, pivo_indice);
			// incrementa o pivo_indice
			pivo_indice++;
		}
	}
	
	// troca o pivô
	troca(vet, pivo_indice, fim);
	
	// retorna o índice do pivô
	return pivo_indice;
}

// escolhe um pivô aleatório para evitar o pior caso do quickSort
int particiona_random(int vet[], int inicio, int fim)
{
	// seleciona um número entre fim (inclusive) e inicio (inclusive)
	int pivo_indice = (rand() % (fim - inicio + 1)) + inicio;
	
	// faz a troca para colocar o pivô no fim
	troca(vet, pivo_indice, fim);
	// chama a particiona
	return particiona(vet, inicio, fim);
}

void quickSort(int vet[], int inicio, int fim)
{
	if(inicio < fim)
	{
		// função particionar retorna o índice do pivô
		int pivo_indice = particiona_random(vet, inicio, fim);
		
		// chamadas recursivas quickSort
		quickSort(vet, inicio, pivo_indice - 1);
		quickSort(vet, pivo_indice + 1, fim);
	}
}

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        int temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int tamanhos[] = {10000,30000,50000,70000,100000};
    clock_t inicio, fim;

    printf("-----------------------------------------------------\n");
    printf("       Comparação algoritmos de classificação\n");
    printf("-----------------------------------------------------\n");
    for (int i = 0; i < sizeof(tamanhos) / sizeof(tamanhos[0]); i++) {
        int n = tamanhos[i];
        int *vetor = (int *)malloc(n * sizeof(int));

        for (int j = 0; j < n; j++) {
            vetor[j] = rand();  // Preencha o vetor com números aleatórios
        }

        // Selection Sort
        inicio = clock();
        selectionSort(vetor, n);
        fim = clock();
        printf("Selection Sort para n=%d: %ld ticks de clock - Tempo tomado: %f\n", n, (long)(fim - inicio), (double)((fim - inicio) / CLOCKS_PER_SEC));

        // Reinicialize o vetor com números aleatórios
        for (int j = 0; j < n; j++) {
            vetor[j] = rand();
        }

        // Bubble Sort
        inicio = clock();
        bubbleSort(vetor, n);
        fim = clock();
        printf("Bubble Sort para n=%d: %ld ticks de clock- Tempo tomado: %f\n", n, (long)(fim - inicio), (double)((fim - inicio) / CLOCKS_PER_SEC));

        // Reinicialize o vetor com números aleatórios
        for (int j = 0; j < n; j++) {
            vetor[j] = rand();
        }

        // Insertion Sort
        inicio = clock();
        insertionSort(vetor, n);
        fim = clock();
        printf("Insertion Sort para n=%d: %ld ticks de clock- Tempo tomado: %f\n", n, (long)(fim - inicio), (double)((fim - inicio) / CLOCKS_PER_SEC));

        //Quicksort
        // Quick Sort
        inicio = clock();
        quickSort(vetor, 0, tamanhos[i]-1);
        fim = clock();
        printf("Quick Sort para n=%d: %ld ticks de clock- Tempo tomado: %f\n", n, (long)(fim - inicio), (double)((fim - inicio) / CLOCKS_PER_SEC));

        free(vetor);
    printf("-----------------------------------------------------\n");
    }

    system("PAUSE");
    return 0;
}